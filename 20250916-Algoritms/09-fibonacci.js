const readline = require('readline');

// Crear interfaz para leer entrada del usuario
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

console.log('=== Generador de Secuencia de Fibonacci ===');

// Funci√≥n para generar la secuencia de Fibonacci (m√©todo iterativo)
function fibonacciIterativo(n) {
  if (n <= 0) return [];
  if (n === 1) return [0];
  if (n === 2) return [0, 1];

  const secuencia = [0, 1];

  for (let i = 2; i < n; i++) {
    const siguiente = secuencia[i - 1] + secuencia[i - 2];
    secuencia.push(siguiente);
  }

  return secuencia;
}

// Funci√≥n para generar Fibonacci recursivo (solo para comparaci√≥n)
function fibonacciRecursivo(n) {
  if (n <= 0) return 0;
  if (n === 1) return 0;
  if (n === 2) return 1;

  return fibonacciRecursivo(n - 1) + fibonacciRecursivo(n - 2);
}

// Funci√≥n para generar secuencia usando recursi√≥n
function secuenciaFibonacciRecursiva(cantidad) {
  const secuencia = [];
  for (let i = 1; i <= cantidad; i++) {
    secuencia.push(fibonacciRecursivo(i));
  }
  return secuencia;
}

// Funci√≥n para mostrar informaci√≥n detallada de la secuencia
function mostrarInformacionFibonacci(secuencia, metodo, tiempoEjecucion) {
  console.log(`\n--- Secuencia de Fibonacci (${metodo}) ---`);
  console.log(`Secuencia: [${secuencia.join(', ')}]`);
  console.log(`Cantidad de n√∫meros: ${secuencia.length}`);
  console.log(`Tiempo de ejecuci√≥n: ${tiempoEjecucion.toFixed(4)} ms`);

  if (secuencia.length > 1) {
    console.log(`Primer n√∫mero: ${secuencia[0]}`);
    console.log(`√öltimo n√∫mero: ${secuencia[secuencia.length - 1]}`);

    // Mostrar algunas propiedades interesantes
    if (secuencia.length >= 3) {
      console.log('\n--- Propiedades matem√°ticas ---');
      const ultimoIndice = secuencia.length - 1;
      const suma = secuencia.reduce((acc, num) => acc + num, 0);
      console.log(`Suma total: ${suma}`);

      // Raz√≥n √°urea aproximada (para n√∫meros grandes)
      if (secuencia.length >= 10) {
        const razonAurea =
          secuencia[ultimoIndice] / secuencia[ultimoIndice - 1];
        console.log(
          `Raz√≥n √°urea aproximada: ${razonAurea.toFixed(6)} (œÜ ‚âà 1.618034)`
        );
      }
    }
  }
}

// Funci√≥n principal para procesar la entrada del usuario
function procesarFibonacci() {
  rl.question(
    'Ingresa la cantidad de n√∫meros de Fibonacci a generar: ',
    (respuesta) => {
      const cantidad = parseInt(respuesta);

      // Validar entrada
      if (isNaN(cantidad) || cantidad < 0) {
        console.log('‚ùå Error: Debes ingresar un n√∫mero entero no negativo.');
        rl.close();
        return;
      }

      if (cantidad === 0) {
        console.log('üìä Secuencia vac√≠a para cantidad = 0');
        rl.close();
        return;
      }

      console.log(
        `\nüî¢ Generando ${cantidad} n√∫meros de la secuencia de Fibonacci...`
      );

      // M√©todo iterativo (eficiente)
      console.log('\nüöÄ Usando m√©todo iterativo...');
      const inicioIterativo = performance.now();
      const secuenciaIterativa = fibonacciIterativo(cantidad);
      const finIterativo = performance.now();
      const tiempoIterativo = finIterativo - inicioIterativo;

      // mostrar la secuencia
      console.log('Secuencia:', secuenciaIterativa);
      console.log(`Tiempo de ejecuci√≥n: ${tiempoIterativo.toFixed(4)} ms`);

      mostrarInformacionFibonacci(
        secuenciaIterativa,
        'Iterativo',
        tiempoIterativo
      );

      // M√©todo recursivo (solo para n√∫meros peque√±os debido a la complejidad exponencial)
      if (cantidad <= 35) {
        console.log('\nüîÑ Usando m√©todo recursivo (para comparaci√≥n)...');
        const inicioRecursivo = performance.now();
        const secuenciaRecursiva = secuenciaFibonacciRecursiva(cantidad);
        const finRecursivo = performance.now();
        const tiempoRecursivo = finRecursivo - inicioRecursivo;

        mostrarInformacionFibonacci(
          secuenciaRecursiva,
          'Recursivo',
          tiempoRecursivo
        );

        // Comparaci√≥n de rendimiento
        console.log('\n‚ö° Comparaci√≥n de rendimiento:');
        console.log(`M√©todo iterativo: ${tiempoIterativo.toFixed(4)} ms`);
        console.log(`M√©todo recursivo: ${tiempoRecursivo.toFixed(4)} ms`);
        console.log(
          `Diferencia: ${(tiempoRecursivo / tiempoIterativo).toFixed(
            2
          )}x m√°s lento el recursivo`
        );
      } else {
        console.log(
          '\n‚ö†Ô∏è  M√©todo recursivo omitido para n > 35 (demasiado lento)'
        );
        console.log(
          '   La complejidad recursiva es O(2^n), mientras que la iterativa es O(n)'
        );
      }

      // Informaci√≥n educativa
      console.log('\nüìö Informaci√≥n sobre Fibonacci:');
      console.log('‚Ä¢ La secuencia de Fibonacci comienza con 0, 1');
      console.log('‚Ä¢ Cada n√∫mero siguiente es la suma de los dos anteriores');
      console.log('‚Ä¢ F√≥rmula: F(n) = F(n-1) + F(n-2)');
      console.log(
        '‚Ä¢ Aparece frecuentemente en la naturaleza (espirales, flores, etc.)'
      );
      console.log(
        '‚Ä¢ La raz√≥n entre n√∫meros consecutivos tiende a œÜ (phi) ‚âà 1.618034'
      );

      rl.close();
    }
  );
}

// Ejecutar el programa
procesarFibonacci();
